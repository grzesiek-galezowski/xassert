using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
using TddEbook.TddToolkit.CommonTypes;
using TddEbook.TypeReflection;

namespace TddEbook.TddToolkit.Generators
{
  public interface OmniGenerator : IInstanceGenerator
  {
    IPAddress IpAddress();
    T ValueOtherThan<T>(params T[] omittedValues);
    T From<T>(params T[] possibleValues);
    DateTime DateTime();
    TimeSpan TimeSpan();
    T ValueOf<T>();
    IEnumerable<T> EmptyEnumerableOf<T>();
    string LegalXmlTagName();
    bool Boolean();
    object Object();
    MethodInfo Method();
    Type Type();
    T Dummy<T>();
    T SubstituteOf<T>() where T : class;
    Uri Uri();
    Guid Guid();
    string UrlString();
    Exception Exception();
    int Port();
    string Ip();
    object EmptyEnumerableOf(Type collectionType);
    T InstanceOtherThanObjects<T>(params object[] omittedValues);
    IEnumerable<T> EnumerableWith<T>(IEnumerable<T> included);
    Task NotStartedTask();
    Task<T> NotStartedTask<T>();
    Task StartedTask();
    Task<T> StartedTask<T>();
    Func<T> Func<T>();
    Func<T1, T2> Func<T1, T2>();
    Func<T1, T2, T3> Func<T1, T2, T3>();
    Func<T1, T2, T3, T4> Func<T1, T2, T3, T4>();
    Func<T1, T2, T3, T4, T5> Func<T1, T2, T3, T4, T5>();
    Func<T1, T2, T3, T4, T5, T6> Func<T1, T2, T3, T4, T5, T6>();
    Action Action();
    Action<T> Action<T>();
    Action<T1, T2> Action<T1, T2>();
    Action<T1, T2, T3> Action<T1, T2, T3>();
    Action<T1, T2, T3, T4> Action<T1, T2, T3, T4>();
    Action<T1, T2, T3, T4, T5> Action<T1, T2, T3, T4, T5>();
    Action<T1, T2, T3, T4, T5, T6> Action<T1, T2, T3, T4, T5, T6>();
    T Of<T>() where T : struct, IConvertible;

    /// <typeparam name="T">MUST BE AN ENUM. FOR NORMAL VALUES, USE AllGenerator.OtherThan()</typeparam>
    /// <param name="excludedValues"></param>
    /// <returns></returns>
    T Besides<[MustBeAnEnum] T>([MustBeAnEnum] params T[] excludedValues) where T : struct, IConvertible;

    IEnumerable<T> Enumerable<T>();
    IEnumerable<T> Enumerable<T>(int length);
    IEnumerable<T> EnumerableWithout<T>(params T[] excluded);
    T[] Array<T>();
    T[] Array<T>(int length);
    T[] ArrayWithout<T>(params T[] excluded);
    T[] ArrayWith<T>(params T[] included);
    T[] ArrayWithout<T>(IEnumerable<T> excluded);
    T[] ArrayWith<T>(IEnumerable<T> included);
    List<T> List<T>();
    List<T> List<T>(int length);
    List<T> ListWithout<T>(params T[] excluded);
    List<T> ListWith<T>(params T[] included);
    List<T> ListWithout<T>(IEnumerable<T> excluded);
    List<T> ListWith<T>(IEnumerable<T> included);
    IReadOnlyList<T> ReadOnlyList<T>();
    IReadOnlyList<T> ReadOnlyList<T>(int length);
    IReadOnlyList<T> ReadOnlyListWith<T>(IEnumerable<T> items);
    IReadOnlyList<T> ReadOnlyListWith<T>(params T[] items);
    IReadOnlyList<T> ReadOnlyListWithout<T>(IEnumerable<T> items);
    IReadOnlyList<T> ReadOnlyListWithout<T>(params T[] items);
    SortedList<TKey, TValue> SortedList<TKey, TValue>();
    SortedList<TKey, TValue> SortedList<TKey, TValue>(int length);
    ISet<T> Set<T>(int length);
    ISet<T> Set<T>();
    ISet<T> SortedSet<T>(int length);
    ISet<T> SortedSet<T>();
    Dictionary<TKey, TValue> Dictionary<TKey, TValue>(int length);
    Dictionary<T, U> DictionaryWithKeys<T, U>(IEnumerable<T> keys);
    Dictionary<TKey, TValue> Dictionary<TKey, TValue>();
    IReadOnlyDictionary<TKey, TValue> ReadOnlyDictionary<TKey, TValue>(int length);
    IReadOnlyDictionary<T, U> ReadOnlyDictionaryWithKeys<T, U>(IEnumerable<T> keys);
    IReadOnlyDictionary<TKey, TValue> ReadOnlyDictionary<TKey, TValue>();
    SortedDictionary<TKey, TValue> SortedDictionary<TKey, TValue>(int length);
    SortedDictionary<TKey, TValue> SortedDictionary<TKey, TValue>();
    ConcurrentDictionary<TKey, TValue> ConcurrentDictionary<TKey, TValue>(int length);
    ConcurrentDictionary<TKey, TValue> ConcurrentDictionary<TKey, TValue>();
    ConcurrentStack<T> ConcurrentStack<T>();
    ConcurrentStack<T> ConcurrentStack<T>(int length);
    ConcurrentQueue<T> ConcurrentQueue<T>();
    ConcurrentQueue<T> ConcurrentQueue<T>(int length);
    ConcurrentBag<T> ConcurrentBag<T>();
    ConcurrentBag<T> ConcurrentBag<T>(int length);
    IEnumerable<T> EnumerableSortedDescending<T>(int length);
    IEnumerable<T> EnumerableSortedDescending<T>();
    IEnumerator<T> Enumerator<T>();
    object List(Type type);
    object Set(Type type);
    object SortedList(Type keyType, Type valueType);
    object SortedSet(Type type);
    object ConcurrentDictionary(Type keyType, Type valueType);
    object Array(Type type);
    ICollection<T> AddManyTo<T>(ICollection<T> collection, int many);
    object Enumerator(Type type);
    object ConcurrentStack(Type type);
    object ConcurrentQueue(Type type);
    object ConcurrentBag(Type type);
    string String();
    string String(string seed);
    string LowerCaseString();
    string UpperCaseString();
    string LowerCaseAlphaString();
    string UpperCaseAlphaString();
    string StringMatching(string pattern);
    string StringOfLength(int charactersCount);
    string StringOtherThan(params string[] alreadyUsedStrings);
    string StringNotContaining<T>(params T[] excludedObjects);
    string StringNotContaining(params string[] excludedSubstrings);
    string StringContaining<T>(T obj);
    string StringContaining(string str);
    string AlphaString();
    string AlphaString(int maxLength);
    string Identifier();
    string NumericString(int digitsCount = AllGenerator.Many);
    byte Digit();
    int IntegerFromSequence(int startingValue = 0, int step = 1);
    byte Octet();
    int IntegerDivisibleBy(int quotient);
    int IntegerNotDivisibleBy(int quotient);
    int IntegerWithExactDigitsCount(int digitsCount);
    long LongIntegerWithExactDigitsCount(int digitsCount);
    uint UnsignedIntegerWithExactDigitsCount(int digitsCount);
    ulong UnsignedLongIntegerWithExactDigitsCount(int digitsCount);
    byte PositiveDigit();
    T Exploding<T>() where T : class;
    int Integer();
    double Double();
    double DoubleOtherThan(double[] others);
    long LongInteger();
    long LongIntegerOtherThan(long[] others);
    ulong UnsignedLongInteger();
    ulong UnsignedLongIntegerOtherThan(ulong[] others);
    int IntegerOtherThan(int[] others);
    byte Byte();
    byte ByteOtherThan(byte[] others);
    decimal Decimal();
    decimal DecimalOtherThan(decimal[] others);
    uint UnsignedInt();
    uint UnsignedIntOtherThan(uint[] others);
    ushort UnsignedShort();
    ushort UnsignedShortOtherThan(ushort[] others);
    short ShortInteger();
    short ShortIntegerOtherThan(short[] others);
    MethodInfo FindEmptyGenericsMethod<T>(string name);
    object ResultOfGenericVersionOfMethod<T>(Type type1, Type type2, string name);
    char AlphaChar();
    char DigitChar();
    char Char();
    char LowerCaseAlphaChar();
    char UpperCaseAlphaChar();
  }
}